/*!
 * Socky JavaScript Library
 *
 * @version 0.5.0-pre
 * @author  Bernard Potocki <bernard.potocki@imanel.org>
 * @licence The MIT licence.
 * @source  http://github.com/socky/socky-js
 */

if(typeof Function.prototype.scoped_to=="undefined")Function.prototype.scoped_to=function(a,b){var f=this;return function(){return f.apply(a,Array.prototype.slice.call(b||[]).concat(Array.prototype.slice.call(arguments)))}};var Socky=function(a){this.options=a||{};this._is_connected=false;this._connection_id=null;SockyManager.is_driver_loaded()&&this.connect();SockyManager.add_socky_instance(this)};
Socky.prototype={is_connected:function(){return this._is_connected},connect:function(){if(window.WebSocket){var a=SockyManager.websocket_url();this.log("connecting",a);this._connection=new WebSocket(a);this._connection.onopen=this.on_socket_open.scoped_to(this);this._connection.onmessage=this.on_socket_message.scoped_to(this);this._connection.onclose=this.on_socket_close.scoped_to(this)}else{Socky.log("WebSocket unavailable");this._connection={}}},on_socket_open:function(){this.log("connected")},
on_socket_message:function(a){this.log("received message",a.data)},on_socket_close:function(){this.log("disconnected")},log:function(){SockyManager.log.apply(SockyManager,arguments)}};
var SockyManager={_is_websocket_driver_loaded:false,_socky_instances:[],_default_options:{assets_location:"<CDN_LOCATION>",app_name:"",websocket_debug:false,websocket_path:"/socket",websocket_host:window.location.hostname,websocket_port:8080,websocket_secure:false},log:function(){if(console&&console.log){for(var a=["Socky"],b=0;b<arguments.length;b++)a.push(arguments[b]);console.log(a.join(" : "))}},is_driver_loaded:function(){return this._is_websocket_driver_loaded},add_socky_instance:function(a){this._socky_instances.push(a)},
websocket_url:function(){var a="ws";if(this._options.websocket_secure)a+="s";a+="://"+this._options.websocket_host+":"+this._options.websocket_port+this._options.websocket_path+"/"+this._options.app_name;return a},init:function(a){this.log("inited");this._options=this._default_options;for(option in a)this._options[option]=a[option];a=[];var b=function(){this.log("Websockets driver loaded");this._web_sockets_loaded()}.scoped_to(this);if(window.JSON==undefined){this.log("no JSON support, requiring it");
a.push(this._options.assets_location+"/json2.min.js")}if(window.WebSocket==undefined){this.log("no WebSocket driver available, requiring it");window.WEB_SOCKET_SWF_LOCATION=this._options.assets_location+"/WebSocketMain.swf";window.WEB_SOCKET_DEBUG=this._options.websocket_debug;a.push(this._options.assets_location+"/flashfallback.min.js")}a.length>0?this._require_scripts(a,b):b()},_web_sockets_loaded:function(){this._is_websocket_driver_loaded=true;for(var a=0;a<this._socky_instances.length;a++){var b=
this._socky_instances[a];b.is_connected()||b.connect()}},_require_scripts:function(a,b){var f=0,h;h=document.addEventListener?function(c,d){c.addEventListener("load",d,false)}:function(c,d){c.attachEvent("onreadystatechange",function(){if(c.readyState=="loaded"||c.readyState=="complete")d()})};for(var i=function(c){f++;if(a.length==f){this.log("All the require script have been loaded!");setTimeout(c,0)}}.scoped_to(this),k=function(c,d){d=d||function(){};var j=document.getElementsByTagName("head")[0],
e=document.createElement("script");e.setAttribute("src",c);e.setAttribute("type","text/javascript");e.setAttribute("async",true);this.log("Adding script",c);h(e,function(){i(d)});j.appendChild(e)}.scoped_to(this),g=0;g<a.length;g++)k(a[g],b)}};
